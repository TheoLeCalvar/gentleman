<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" xmlns:c="http://myconstraints">
	<script><![CDATA[
		
		var OCLLibrary = {
		    __asArray(x) {
		        if (Array.isArray(x)) {
		            return x;
		        }
		        else {
		            return [x];
		        }
		    },
		
		    size(collection) {
		        return this.__asArray(collection).length;
		    },
		
		    notEmpty(collection) {
		        return this.size(collection) != 0;
		    },
		
		    empty(collection) {
		        return this.size(collection) == 0;
		    },
		
		    union(lhs, rhs) {
		        return lhs.concat(rhs);
		    },
		
		    at(collection, idx) {
		        return this.__asArray(collection)[idx - 1];
		    },
		
		    subSequence(collection, start, end) {
		        return this.__asArray(collection).slice(start - 1, end);
		    },
		
		    sum(collection) {
		        return this.__asArray(collection).reduce((acc, val) => acc + val);
		    },
		
		    iterate(collection, seed, lambda) {
		        return this.__asArray(collection).reduce(lambda, seed);
		    },
		
		    collect(collection, lambda) {
		        return this.__asArray(collection).map(lambda);
		    },
		
		    zipWith(left, right, lambda) {
			const length = Math.min(left.length, right.length);
		        return left.slice(0, length).map((v, idx) => lambda(v, right[idx]));
		    },
		
		    prepend(collection, element) {
		        return [element].concat(collection);
		    },
		
		    includes(collection, element) {
		        return this.__asArray(collection).includes(element);
		    },
		
		    oclIsUndefined(val) {
		        return val ? false : true;
		    },
		
		    oclType(val) {
		        //TODO implement oclType
		    },
		
		    oclIsKindOf(val, type) {
		        //TODO implement oclIsKindOf
		    },
		
		    toString(val) {
		        return val.toString();
		    },
		
		    asOrderedSet(collection) {
		        return new Set(collection);
		    },
		
		    startWiths(str, prefix) {
		        return str.startWiths(prefix);
		    },
		
		    first(collection) {
		        return this.__asArray(collection)[0];
		    },
		
		    last(collection) {
		        let c = this.__asArray(collection);
		        return c[c.length - 1];
		    },
		
		    toInteger(string) {
		        return string * 1;
		    },
		}
		
		

	]]></script>
	<defs>
		<!-- 20:1-47:2 -->
		<g id="node"  movable="circle">
			<circle id=".circle" class="node"  cx-value="param(xinit) 0" cy-value="param(yinit) 0"/>
			<text id=".label" content-value="param(label)" pointer-events="none"  >
				default
			</text>
			<!-- constraints -->
			<constraints name="value">
				{
					let s = this;
					return 							this.circle.r
											.ge(
												(new tcsvg.Expression(20))
											)
										.and(
												this.circle.r
											.ge(
													this.label.width
												.times(
													(new tcsvg.Expression(0.7))
												)
											)
										)
									.and(
											this.circle.r
										.ge(
												this.label.height
											.times(
												(new tcsvg.Expression(0.7))
											)
										)
									)
								.and(
									this.circle.cx.st(c.Strength.medium)
								)
							.and(
								this.circle.cy.st(c.Strength.medium)
							)
						.and(
								this.circle.cx
							.eq(
									this.label.x
								.plus(
										this.label.width
									.div(
										(new tcsvg.Expression(2))
									)
								)
							)
						)
					.and(
							this.circle.cy
						.eq(
								this.label.y
							.plus(
									this.label.height
								.div(
									(new tcsvg.Expression(2))
								)
							)
						)
					);
			}
			</constraints>
		</g>
		<!-- 49:1-66:2 -->
		<g id="arc" >
			<line id=".line" class="arc" />
			<!-- constraints -->
			<constraints name="value">
				{
					let s = this;
					return 				this.line.x1
								.eq(
									s.source.circle.cx
								)
							.and(
									this.line.y1
								.eq(
									s.source.circle.cy
								)
							)
						.and(
								this.line.x2
							.eq(
								s.target.circle.cx
							)
						)
					.and(
							this.line.y2
						.eq(
							s.target.circle.cy
						)
					);
			}
			</constraints>
		</g>
	</defs>


	<style><![CDATA[
		.node {
		    fill: #0dbaff;
		    stroke: black;
		    stroke-width: 1px;
		}
		
		.arc {
		    stroke-width: 1px;
		    stroke: black;
		}
	]]></style>

	<script href="/ecmfa2021-atlc-web/tcsvg/c.js"/>
	<script href="/ecmfa2021-atlc-web/tcsvg/TCSVG.min.js"/>
</svg>
